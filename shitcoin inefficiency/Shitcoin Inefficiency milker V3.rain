networks:
  polygon-mean: 
    rpc: https://polygon-mainnet.g.alchemy.com/v2/y3BXawVv5uuP_g8BaDlKbKoTBGHo9zD9
    chain-id: 137 
    network-id: 137 
    currency: MATIC

subgraphs:
  polygon-mean: https://api.thegraph.com/subgraphs/name/h20liquidity/polygon-0xc95a5f8e
  
orderbooks:
  polygon-mean:
    address: 0xc95A5f8eFe14d7a20BD2E5BAFEC4E71f8Ce0B9A6
    network: polygon-mean
    subgraph: polygon-mean

deployers:
  polygon-mean:
    address: 0xB3aC858bEAf7814892d3946A8C109A7D701DF8E7
    network: polygon-mean

tokens:
  geod:
    address: 0xac0f66379a6d7801d7726d5a943356a172549adb
    decimals: 18
    network: polygon-mean
  usdc:
    address: 0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359
    decimals: 6
    network: polygon-mean

scenarios:
  polygon-mean:
    orderbook: polygon-mean
    bindings:
      polygon-parser: 0x8f037f2a3fF2dee510486D9C63A47A245991a4C1
      polygon-uni-parser: 0x2382e861cF4F47578aC29B50944b3b445577aF74
    scenarios:
      geod:
        bindings:
          base-token: 0x88a269df8fe7f53e590c561954c52fccc8ec0cfb
          quote-token: 0x82af49447d8a07e3bd95bd0d56f35241523fbab1
          poolfee: "[uniswap-v3-fee-medium]"
          boundary-value: 0.03
          buy-volume: 0.01
          second-interval: 300
        
orders:
  # vault-id generated with `openssl rand -hex 32`
  geod:
    orderbook: polygon-mean
    inputs:
      - token: geod
        vault-id: 
      - token: usdc
        vault-id: 
    outputs:
      - token: geod
        vault-id: 
      - token: usdc
        vault-id: 

deployments:
  geod:
   scenario: polygon-mean.geod
   order: geod

    
---
/* Shitcoin Inefficiency Milker - Long only */
#polygon-parser !The parsers for arb.
#polygon-uni-parser !Uniswap words for arb.
#base-token !The shitcoin that is being traded.
#quote-token !What the shitcoin is priced in USD/WETH.
#poolfee !The fee on the uniswap pool.
#boundary-value !The threshold for differences of the moving average that trigger the trade.
#buy-volume !The amount of WETH/USD that is being traded.
#second-interval !The amount of seconds which are used for the candel length.

/* core logic */
#calculate-io 
using-words-from 0x8f037f2a3fF2dee510486D9C63A47A245991a4C1 0x2382e861cF4F47578aC29B50944b3b445577aF74

/* obtain prices */
current-price: uniswap-v3-twap-output-ratio(quote-token base-token 0 0 poolfee),
two-x-average: uniswap-v3-twap-output-ratio(quote-token base-token 0 mul(2 second-interval) poolfee),
/*0*/
long-twap: uniswap-v3-twap-output-ratio(quote-token base-token mul(10 second-interval) mul(0 second-interval) poolfee),
medium-twap: uniswap-v3-twap-output-ratio(quote-token base-token mul(5 second-interval) mul(0 second-interval) poolfee),
short-twap: uniswap-v3-twap-output-ratio(quote-token base-token mul(1 second-interval) mul(0 second-interval) poolfee),
/* 1 */
long-twap-1: uniswap-v3-twap-output-ratio(quote-token base-token mul(11 second-interval) mul(1 second-interval) poolfee),
medium-twap-1: uniswap-v3-twap-output-ratio(quote-token base-token mul(6 second-interval) mul(1 second-interval) poolfee),
short-twap-1: uniswap-v3-twap-output-ratio(quote-token base-token mul(2 second-interval) mul(1 second-interval) poolfee),
/* 2 */
long-twap-2: uniswap-v3-twap-output-ratio(quote-token base-token mul(12 second-interval) mul(2 second-interval) poolfee),
medium-twap-2: uniswap-v3-twap-output-ratio(quote-token base-token mul(7 second-interval) mul(2 second-interval) poolfee),
short-twap-2: uniswap-v3-twap-output-ratio(quote-token base-token mul(3 second-interval) mul(2 second-interval) poolfee),
/* 3 */
long-twap-3: uniswap-v3-twap-output-ratio(quote-token base-token mul(13 second-interval) mul(3 second-interval) poolfee),
medium-twap-3: uniswap-v3-twap-output-ratio(quote-token base-token mul(8 second-interval) mul(3 second-interval) poolfee),
short-twap-3: uniswap-v3-twap-output-ratio(quote-token base-token mul(4 second-interval) mul(3 second-interval) poolfee),
/* 4 */
long-twap-4: uniswap-v3-twap-output-ratio(quote-token base-token mul(14 second-interval) mul(4 second-interval) poolfee),
medium-twap-4: uniswap-v3-twap-output-ratio(quote-token base-token mul(9 second-interval) mul(4 second-interval) poolfee),
short-twap-4: uniswap-v3-twap-output-ratio(quote-token base-token mul(5 second-interval) mul(4 second-interval) poolfee),
/* 5 */
long-twap-5: uniswap-v3-twap-output-ratio(quote-token base-token mul(15 second-interval) mul(5 second-interval) poolfee),
medium-twap-5: uniswap-v3-twap-output-ratio(quote-token base-token mul(10 second-interval) mul(5 second-interval) poolfee),
short-twap-5: uniswap-v3-twap-output-ratio(quote-token base-token mul(6 second-interval) mul(5 second-interval) poolfee),

/* obtain boundaries */
boundary : mul(short-twap boundary-value),
boundary-1 : mul(short-twap-1 boundary-value),
boundary-2 : mul(short-twap-2 boundary-value),
boundary-3 : mul(short-twap-3 boundary-value),
boundary-4 : mul(short-twap-4 boundary-value),
boundary-5 : mul(short-twap-5 boundary-value),

/* calculate distances */
/* we want to do medium-twap minus long-twap but no neg numbers */
tcheck: greater-than(medium-twap long-twap), /* returns 0 if sub will make negative */
trend-distance: if(is-zero(tcheck) sub(long-twap medium-twap) sub(medium-twap long-twap)), /* if it will make it negative we want to switch it around */
tneg-bool: is-zero(tcheck), /* value of 1 means it is negative */

/* we want to do short-twap minus long-twap but no neg numbers */
pcheck: greater-than(short-twap long-twap), 
price-distance: if(equal-to(pcheck 0) sub(long-twap short-twap) sub(short-twap long-twap)), 
pneg-bool: is-zero(pcheck),

/* if both are + or - you remove the value of the what is getting taken away ignoring signs */
/* if one is - and one is + you add the value of what is getting taken away ignoring signs */
/* there are 8 different scenarios */
/* price-distance - trend-distance */
/* both positive */
/*  (8) - (2) = 6  */
/*  (2) - (8) = -6  */
/* both negative */
/*  (-8) - (-2) = (-6)  */
/*  (-2) - (-8) = (6)  */
/* first negative and second positive */
/*  (-8) - (2) = (-10)  */
/*  (-2) - (8) = (-10)  */
/* first positive and second negative */
/*  (8) - (-2) = 10  */
/*  (2) - (-8) = 10  */

/* checking how we need to handle the sub */
both-pos: is-zero(add(tneg-bool pneg-bool)),
both-neg: equal-to(add(tneg-bool pneg-bool) 2),
first-neg: every(tneg-bool is-zero(pneg-bool)),
first-pos: every(is-zero(tneg-bool) pneg-bool),
which-greater: greater-than(price-distance trend-distance), /* returns 1 if first is greater 0 if second */

svalue:
  conditions(
  every(both-pos which-greater) sub(price-distance trend-distance)          
  every(both-pos is-zero(which-greater)) sub(trend-distance price-distance)  
  every(both-neg which-greater) sub(price-distance trend-distance)         
  every(both-neg is-zero(which-greater)) sub(trend-distance price-distance)  
  every(first-neg which-greater) sub(price-distance trend-distance)          
  every(first-neg is-zero(which-greater)) sub(trend-distance price-distance) 
  every(first-pos which-greater) sub(price-distance trend-distance)          
  every(first-pos is-zero(which-greater)) sub(trend-distance price-distance)), 

sneg:
  any(        
    every(both-pos is-zero(which-greater))   
    every(both-neg which-greater)              
    every(first-neg which-greater)),

/* calculate distances 1 */
tcheck-1: greater-than(medium-twap-1 long-twap-1), 
trend-distance-1: if(is-zero(tcheck-1) sub(long-twap-1 medium-twap-1) sub(medium-twap-1 long-twap-1)), 
tneg-bool-1: is-zero(tcheck-1),

pcheck-1: greater-than(short-twap-1 long-twap-1), 
price-distance-1: if(equal-to(pcheck-1 0) sub(long-twap-1 short-twap-1) sub(short-twap-1 long-twap-1)), 
pneg-bool-1: is-zero(pcheck-1),

/* checking how we need to handle the sub */
both-pos-1: is-zero(add(tneg-bool-1 pneg-bool-1)),
both-neg-1: equal-to(add(tneg-bool-1 pneg-bool-1) 2),
first-neg-1: every(tneg-bool-1 is-zero(pneg-bool-1)),
first-pos-1: every(is-zero(tneg-bool-1) pneg-bool-1),
which-greater-1: greater-than(price-distance-1 trend-distance-1),

svalue-1:
  conditions(
    every(both-pos-1 which-greater-1) sub(price-distance-1 trend-distance-1)
    every(both-pos-1 is-zero(which-greater-1)) sub(trend-distance-1 price-distance-1)
    every(both-neg-1 which-greater-1) sub(price-distance-1 trend-distance-1)
    every(both-neg-1 is-zero(which-greater-1)) sub(trend-distance-1 price-distance-1)
    every(first-neg-1 which-greater-1) sub(price-distance-1 trend-distance-1)
    every(first-neg-1 is-zero(which-greater-1)) sub(trend-distance-1 price-distance-1)
    every(first-pos-1 which-greater-1) sub(price-distance-1 trend-distance-1)
    every(first-pos-1 is-zero(which-greater-1)) sub(trend-distance-1 price-distance-1)),

sneg-1:
  any(
    every(both-pos-1 is-zero(which-greater-1))
    every(both-neg-1 which-greater-1)
    every(first-neg-1 which-greater-1)),



/* calculate distances 2 */
tcheck-2: greater-than(medium-twap-2 long-twap-2), 
trend-distance-2: if(is-zero(tcheck-2) sub(long-twap-2 medium-twap-2) sub(medium-twap-2 long-twap-2)), 
tneg-bool-2: is-zero(tcheck-2),

pcheck-2: greater-than(short-twap-2 long-twap-2), 
price-distance-2: if(equal-to(pcheck-2 0) sub(long-twap-2 short-twap-2) sub(short-twap-2 long-twap-2)), 
pneg-bool-2: is-zero(pcheck-2),


/* checking how we need to handle the sub */
both-pos-2: is-zero(add(tneg-bool-2 pneg-bool-2)),
both-neg-2: equal-to(add(tneg-bool-2 pneg-bool-2) 2),
first-neg-2: every(tneg-bool-2 is-zero(pneg-bool-2)),
first-pos-2: every(is-zero(tneg-bool-2) pneg-bool-2),
which-greater-2: greater-than(price-distance-2 trend-distance-2),

svalue-2:
  conditions(
    every(both-pos-2 which-greater-2) sub(price-distance-2 trend-distance-2)
    every(both-pos-2 is-zero(which-greater-2)) sub(trend-distance-2 price-distance-2)
    every(both-neg-2 which-greater-2) sub(price-distance-2 trend-distance-2)
    every(both-neg-2 is-zero(which-greater-2)) sub(trend-distance-2 price-distance-2)
    every(first-neg-2 which-greater-2) sub(price-distance-2 trend-distance-2)
    every(first-neg-2 is-zero(which-greater-2)) sub(trend-distance-2 price-distance-2)
    every(first-pos-2 which-greater-2) sub(price-distance-2 trend-distance-2)
    every(first-pos-2 is-zero(which-greater-2)) sub(trend-distance-2 price-distance-2)),

sneg-2:
  any(
    every(both-pos-2 is-zero(which-greater-2))
    every(both-neg-2 which-greater-2)
    every(first-neg-2 which-greater-2)),


/* calculate distances 3 */
tcheck-3: greater-than(medium-twap-3 long-twap-3), 
trend-distance-3: if(is-zero(tcheck-3) sub(long-twap-3 medium-twap-3) sub(medium-twap-3 long-twap-3)), 
tneg-bool-3: is-zero(tcheck-3),

pcheck-3: greater-than(short-twap-3 long-twap-3), 
price-distance-3: if(equal-to(pcheck-3 0) sub(long-twap-3 short-twap-3) sub(short-twap-3 long-twap-3)), 
pneg-bool-3: is-zero(pcheck-3),


/* checking how we need to handle the sub */
both-pos-3: is-zero(add(tneg-bool-3 pneg-bool-3)),
both-neg-3: equal-to(add(tneg-bool-3 pneg-bool-3) 2),
first-neg-3: every(tneg-bool-3 is-zero(pneg-bool-3)),
first-pos-3: every(is-zero(tneg-bool-3) pneg-bool-3),
which-greater-3: greater-than(price-distance-3 trend-distance-3),

svalue-3:
  conditions(
    every(both-pos-3 which-greater-3) sub(price-distance-3 trend-distance-3)
    every(both-pos-3 is-zero(which-greater-3)) sub(trend-distance-3 price-distance-3)
    every(both-neg-3 which-greater-3) sub(price-distance-3 trend-distance-3)
    every(both-neg-3 is-zero(which-greater-3)) sub(trend-distance-3 price-distance-3)
    every(first-neg-3 which-greater-3) sub(price-distance-3 trend-distance-3)
    every(first-neg-3 is-zero(which-greater-3)) sub(trend-distance-3 price-distance-3)
    every(first-pos-3 which-greater-3) sub(price-distance-3 trend-distance-3)
    every(first-pos-3 is-zero(which-greater-3)) sub(trend-distance-3 price-distance-3)),

sneg-3:
  any(
    every(both-pos-3 is-zero(which-greater-3))
    every(both-neg-3 which-greater-3)
    every(first-neg-3 which-greater-3)),

/* calculate distances 4 */
tcheck-4: greater-than(medium-twap-4 long-twap-4), 
trend-distance-4: if(is-zero(tcheck-4) sub(long-twap-4 medium-twap-4) sub(medium-twap-4 long-twap-4)), 
tneg-bool-4: is-zero(tcheck-4),

pcheck-4: greater-than(short-twap-4 long-twap-4), 
price-distance-4: if(equal-to(pcheck-4 0) sub(long-twap-4 short-twap-4) sub(short-twap-4 long-twap-4)), 
pneg-bool-4: is-zero(pcheck-4),


/* checking how we need to handle the sub */
both-pos-4: is-zero(add(tneg-bool-4 pneg-bool-4)),
both-neg-4: equal-to(add(tneg-bool-4 pneg-bool-4) 2),
first-neg-4: every(tneg-bool-4 is-zero(pneg-bool-4)),
first-pos-4: every(is-zero(tneg-bool-4) pneg-bool-4),
which-greater-4: greater-than(price-distance-4 trend-distance-4),

svalue-4:
  conditions(
    every(both-pos-4 which-greater-4) sub(price-distance-4 trend-distance-4)
    every(both-pos-4 is-zero(which-greater-4)) sub(trend-distance-4 price-distance-4)
    every(both-neg-4 which-greater-4) sub(price-distance-4 trend-distance-4)
    every(both-neg-4 is-zero(which-greater-4)) sub(trend-distance-4 price-distance-4)
    every(first-neg-4 which-greater-4) sub(price-distance-4 trend-distance-4)
    every(first-neg-4 is-zero(which-greater-4)) sub(trend-distance-4 price-distance-4)
    every(first-pos-4 which-greater-4) sub(price-distance-4 trend-distance-4)
    every(first-pos-4 is-zero(which-greater-4)) sub(trend-distance-4 price-distance-4)),

sneg-4:
  any(
    every(both-pos-4 is-zero(which-greater-4))
    every(both-neg-4 which-greater-4)
    every(first-neg-4 which-greater-4)),

/* calculate distances 5 */
tcheck-5: greater-than(medium-twap-5 long-twap-5), 
trend-distance-5: if(is-zero(tcheck-5) sub(long-twap-5 medium-twap-5) sub(medium-twap-5 long-twap-5)), 
tneg-bool-5: is-zero(tcheck-5),

pcheck-5: greater-than(short-twap-5 long-twap-5), 
price-distance-5: if(equal-to(pcheck-5 0) sub(long-twap-5 short-twap-5) sub(short-twap-5 long-twap-5)), 
pneg-bool-5: is-zero(pcheck-5),


/* checking how we need to handle the sub */
both-pos-5: is-zero(add(tneg-bool-5 pneg-bool-5)),
both-neg-5: equal-to(add(tneg-bool-5 pneg-bool-5) 2),
first-neg-5: every(tneg-bool-5 is-zero(pneg-bool-5)),
first-pos-5: every(is-zero(tneg-bool-5) pneg-bool-5),
which-greater-5: greater-than(price-distance-5 trend-distance-5),

svalue-5:
  conditions(
    every(both-pos-5 which-greater-5) sub(price-distance-5 trend-distance-5) 
    every(both-pos-5 is-zero(which-greater-5)) sub(trend-distance-5 price-distance-5) 
    every(both-neg-5 which-greater-5) sub(price-distance-5 trend-distance-5) 
    every(both-neg-5 is-zero(which-greater-5)) sub(trend-distance-5 price-distance-5) 
    every(first-neg-5 which-greater-5) sub(price-distance-5 trend-distance-5) 
    every(first-neg-5 is-zero(which-greater-5)) sub(trend-distance-5 price-distance-5) 
    every(first-pos-5 which-greater-5) sub(price-distance-5 trend-distance-5)
    every(first-pos-5 is-zero(which-greater-5)) sub(trend-distance-5 price-distance-5)),

sneg-5:
  any(
    every(both-pos-5 is-zero(which-greater-5))
    every(both-neg-5 which-greater-5)
    every(first-neg-5 which-greater-5)),

/*long-condition-calls*/
lccall: call<'longcondition>(svalue sneg boundary current-price two-x-average),
lccall-1: call<'longcondition>(svalue-1 sneg-1 boundary-1 current-price two-x-average),
lccall-2: call<'longcondition>(svalue-2 sneg-2 boundary-2 current-price two-x-average),
lccall-3: call<'longcondition>(svalue-3 sneg-3 boundary-3 current-price two-x-average),
lccall-4: call<'longcondition>(svalue-4 sneg-4 boundary-4 current-price two-x-average),
lccall-5: call<'longcondition>(svalue-5 sneg-5 boundary-5 current-price two-x-average),

enterlong : any(lccall lccall-1 lccall-2 lccall-3 lccall-4 lccall-5 1),

/*context*/
solver-input: input-token-address(),
solver-output:  output-token-address(),

/* quote token = WETH, USDT. Base token = shitcoin */
buycontexts:every(
  equal-to(solver-input quote-token)
  equal-to(solver-output base-token)),
sellcontexts:every(
  equal-to(solver-input base-token)
  equal-to(solver-output quote-token)),

/*memory*/ 
sl-value: mul(get("entry-price-20062024") 0.96),

/*trade conditions*/
long-condition: every(
  buycontexts
  is-zero(get("is-long-20062024")) 
  enterlong),
tp-condition: every(     
  sellcontexts
  get("is-long-20062024") 
  greater-than(block-timestamp() add(get("entry-time-20062024") mul(second-interval 10)))
  less-than(medium-twap long-twap)),
sl-condition: every(
  sellcontexts
  get("is-long-20062024")
  less-than(current-price sl-value)),

/*entry memory*/
:set("entry-price-20062024" if(long-condition mul(current-price 1.02) get("entry-price-20062024"))),
:set("entry-time-20062024" if(long-condition block-timestamp() get("entry-time-20062024"))),
  
/* is long sets */
:set("is-long-20062024" if(long-condition 1 get("is-long-20062024"))),
:set("is-long-20062024" if(tp-condition 0 get("is-long-20062024"))),
:set("is-long-20062024" if(sl-condition 0 get("is-long-20062024"))),

/*calculate amount*/
amount:if(
  long-condition buy-volume 
  input-vault-balance-before()),

/*calculate price */
price:if(long-condition
  mul(current-price 1.02)
  if(tp-condition 
    mul(current-price 0.98)
    ensure(sl-condition sl-value)
    ));


#handle-io
/* avoid partial vault clears as it would break our ratio logic */
:ensure(
  equal-to(
    output-vault-balance-before()
    output-vault-balance-decrease()
  )
  "Partial clear."
);

/* Entry Condition for opening position */
#longcondition
  svalue-n sneg-n boundary-n current-price two-x-average:,
  result: every(greater-than(svalue-n boundary-n) greater-than(current-price two-x-average) sneg-n);

