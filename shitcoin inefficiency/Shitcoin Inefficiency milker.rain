---
/* Shitcoin Inefficiency Milker - Long only */
/* NST example: https://www.dextools.io/app/en/arbitrum/pair-explorer/0x53d3e59faac08184720bcb2816f4cf5b36d6767d?t=1714056182350 */
/* needs 5 mins */

/* Set up */
Wallet_address: 0x5e7E3eD619769833DBc23B21BAd674D512f157ec
BaseToken: 0x88a269df8fe7f53e590c561954c52fccc8ec0cfb    /* Shitcoin */
QuoteToken: 0x82aF49447D8a07e3bd95BD0d56f35241523fBab1      /* WETH */
BaseTokenD: 18
QuoteTokenD: 18
Poolfee: 0.03
Boundary 0.05
Buy_volume: 0.08 /* WETH */
second_interval: 60

#
Current_price : Short_TWAP_S: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD 0 1 poolfee);

/* Obtain Averages */
/* 0 */
Long_TWAP_L: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(0 second_interval) mul-int(10 second_interval) poolfee),
Long_TWAP_S: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(0 second_interval) mul-int(5 second_interval) poolfee),
Short_TWAP_L: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(0 second_interval) mul-int(2 second_interval) poolfee),
Short_TWAP_S: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(0 second_interval) mul-int(1 second_interval) poolfee);
/* 1 */
Long_TWAP_L_1: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(1 second_interval) mul-int(11 second_interval) poolfee),
Long_TWAP_S_1: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(1 second_interval) mul-int(6 second_interval) poolfee),
Short_TWAP_S_1: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(1 second_interval) mul-int(2 second_interval) poolfee);
/* 2 */
Long_TWAP_L_2: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(2 second_interval) mul-int(12 second_interval) poolfee),
Long_TWAP_S_2: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(2 second_interval) mul-int(7 second_interval) poolfee),
Short_TWAP_S_2: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(2 second_interval) mul-int(3 second_interval) poolfee);
/* 3 */
Long_TWAP_L_3: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(3 second_interval) mul-int(13 second_interval) poolfee),
Long_TWAP_S_3: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(3 second_interval) mul-int(8 second_interval) poolfee),
Short_TWAP_S_3: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(3 second_interval) mul-int(4 second_interval) poolfee);
/* 4 */
Long_TWAP_L_4: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(4 second_interval) mul-int(14 second_interval) poolfee),
Long_TWAP_S_4: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(4 second_interval) mul-int(9 second_interval) poolfee),
Short_TWAP_S_4: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(4 second_interval) mul-int(5 second_interval) poolfee);
/* 5 */
Long_TWAP_L_5: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(5 second_interval) mul-int(15 second_interval) poolfee),
Long_TWAP_S_5: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(5 second_interval) mul-int(10 second_interval) poolfee),
Short_TWAP_S_5: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(5 second_interval) mul-int(6 second_interval) poolfee);
/* 6 */
Long_TWAP_L_6: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(6 second_interval) mul-int(16 second_interval) poolfee),
Long_TWAP_S_6: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(6 second_interval) mul-int(11 second_interval) poolfee),
Short_TWAP_S_6: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(6 second_interval) mul-int(7 second_interval) poolfee);
/* 7 */
Long_TWAP_L_7: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(7 second_interval) mul-int(17 second_interval) poolfee),
Long_TWAP_S_7: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(7 second_interval) mul-int(12 second_interval) poolfee),
Short_TWAP_S_7: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(7 second_interval) mul-int(8 second_interval) poolfee);
/* 8 */
Long_TWAP_L_8: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(8 second_interval) mul-int(18 second_interval) poolfee),
Long_TWAP_S_8: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(8 second_interval) mul-int(13 second_interval) poolfee),
Short_TWAP_S_8: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(8 second_interval) mul-int(9 second_interval) poolfee);
/* 9 */
Long_TWAP_L_9: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(9 second_interval) mul-int(19 second_interval) poolfee),
Long_TWAP_S_9: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(9 second_interval) mul-int(14 second_interval) poolfee),
Short_TWAP_S_9: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(9 second_interval) mul-int(10 second_interval) poolfee);
/* 10 */
Long_TWAP_L_10: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(10 second_interval) mul-int(20 second_interval) poolfee),
Long_TWAP_S_10: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(10 second_interval) mul-int(15 second_interval) poolfee),
Short_TWAP_S_10: uniswap-v3-twap-output-ratio(QuoteToken QuoteTokenD BaseToken BaseTokenD mul-int(10 second_interval) mul-int(11 second_interval) poolfee);

/* Calculate the boundaries with the prev closes*/
Boundary_1 : decimal18-mul(Short_TWAP_S_1 Boundary_value),
Boundary_2 : decimal18-mul(Short_TWAP_S_2 Boundary_value),
Boundary_3 : decimal18-mul(Short_TWAP_S_3 Boundary_value),
Boundary_4 : decimal18-mul(Short_TWAP_S_4 Boundary_value),
Boundary_5 : decimal18-mul(Short_TWAP_S_5 Boundary_value),
Boundary_6 : decimal18-mul(Short_TWAP_S_6 Boundary_value),
Boundary_7 : decimal18-mul(Short_TWAP_S_7 Boundary_value),
Boundary_8 : decimal18-mul(Short_TWAP_S_8 Boundary_value),
Boundary_9 : decimal18-mul(Short_TWAP_S_9 Boundary_value),
Boundary_10 : decimal18-mul(Short_TWAP_S_10 Boundary_value);

/* Calculate distances */
/* 0 */
Trend_distance : decimal18-sub(Long_TWAP_S Long_TWAP_L),
Price_distance : decimal18-sub(Short_TWAP_S Long_TWAP_L),
Standardised_distance : decimal18-sub(Price_distance Trend_distance);
/* 1 */
Trend_distance_1 : decimal18-sub(Long_TWAP_S_1 Long_TWAP_L_1),
Price_distance_1 : decimal18-sub(Short_TWAP_S_1 Long_TWAP_L_1),
Standardised_distance_1 : decimal18-sub(Price_distance_1 Trend_distance_1);
/* 2 */
Trend_distance_2 : decimal18-sub(Long_TWAP_S_2 Long_TWAP_L_2),
Price_distance_2 : decimal18-sub(Short_TWAP_S_2 Long_TWAP_L_2),
Standardised_distance_2 : decimal18-sub(Price_distance_2 Trend_distance_2);
/* 3 */
Trend_distance_3 : decimal18-sub(Long_TWAP_S_3 Long_TWAP_L_3),
Price_distance_3 : decimal18-sub(Short_TWAP_S_3 Long_TWAP_L_3),
Standardised_distance_3 : decimal18-sub(Price_distance_3 Trend_distance_3);
/* 4 */
Trend_distance_4 : decimal18-sub(Long_TWAP_S_4 Long_TWAP_L_4),
Price_distance_4 : decimal18-sub(Short_TWAP_S_4 Long_TWAP_L_4),
Standardised_distance_4 : decimal18-sub(Price_distance_4 Trend_distance_4);
/* 5 */
Trend_distance_5 : decimal18-sub(Long_TWAP_S_5 Long_TWAP_L_5),
Price_distance_5 : decimal18-sub(Short_TWAP_S_5 Long_TWAP_L_5),
Standardised_distance_5 : decimal18-sub(Price_distance_5 Trend_distance_5);
/* 6 */
Trend_distance_6 : decimal18-sub(Long_TWAP_S_6 Long_TWAP_L_6),
Price_distance_6 : decimal18-sub(Short_TWAP_S_6 Long_TWAP_L_6),
Standardised_distance_6 : decimal18-sub(Price_distance_6 Trend_distance_6);
/* 7 */
Trend_distance_7 : decimal18-sub(Long_TWAP_S_7 Long_TWAP_L_7),
Price_distance_7 : decimal18-sub(Short_TWAP_S_7 Long_TWAP_L_7),
Standardised_distance_7 : decimal18-sub(Price_distance_7 Trend_distance_7);
/* 8 */
Trend_distance_8 : decimal18-sub(Long_TWAP_S_8 Long_TWAP_L_8),
Price_distance_8 : decimal18-sub(Short_TWAP_S_8 Long_TWAP_L_8),
Standardised_distance_8 : decimal18-sub(Price_distance_8 Trend_distance_8);
/* 9 */
Trend_distance_9 : decimal18-sub(Long_TWAP_S_9 Long_TWAP_L_9),
Price_distance_9 : decimal18-sub(Short_TWAP_S_9 Long_TWAP_L_9),
Standardised_distance_9 : decimal18-sub(Price_distance_9 Trend_distance_9);
/* 10 */
Trend_distance_10 : decimal18-sub(Long_TWAP_S_10 Long_TWAP_L_10),
Price_distance_10 : decimal18-sub(Short_TWAP_S_10 Long_TWAP_L_10),
Standardised_distance_10 : decimal18-sub(Price_distance_10 Trend_distance_10);



/* No for loops atm so use expressions, write out each twap and test */
/* Entry Condition for opening position */ 
#LongCondition
  standardised_distance_n, prev_close_L_n:,
  result: if(every(less-than(standardised_distance_n lower_bound_n) greater-than(Short_TWAP_S Short_TWAP_L))1 0);

call1_L: call<'LongCondition>(Standardised_distance, prev_close_L_1),
call2_L: call<'LongCondition>(Standardised_distance_1, prev_close_L_2),
call3_L: call<'LongCondition>(Standardised_distance_2, prev_close_L_3),
call4_L: call<'LongCondition>(Standardised_distance_3, prev_close_L_4);

enterlong : if(any(equal(call1 1) equal(call2 1) equal(call3 1) equal(call4 1)) 1 0);

/* Entry Condition saftey guard from expansions retreats */ 
/* The guard requires calculating if the standardised distance has exceeded the upper limit in the last 10 bars */
#GuardCondition 
  Standardised_distance_n, prev_close_U_n:,
  result: if(greater-than(Standardised_distance_n prev_close_U_n) 1 0)

call1_G: call<'GuardCondition>(Standardised_distance_0 prev_close_U_1),
call2_G: call<'GuardCondition>(Standardised_distance_1 prev_close_U_2),
call3_G: call<'GuardCondition>(Standardised_distance_2 prev_close_U_3),
call4_G: call<'GuardCondition>(Standardised_distance_3 prev_close_U_4),
call5_G: call<'GuardCondition>(Standardised_distance_4 prev_close_U_5),
call6_G: call<'GuardCondition>(Standardised_distance_5 prev_close_U_6),
call7_G: call<'GuardCondition>(Standardised_distance_6 prev_close_U_7),
call8_G: call<'GuardCondition>(Standardised_distance_7 prev_close_U_8),
call9_G: call<'GuardCondition>(Standardised_distance_8 prev_close_U_9),
call10_G: call<'GuardCondition>(Standardised_distance_9 prev_close_U_10);
/* if the guard is true/on/1 then you do not want to trade */
GuardCondition : if(any(equal(call1_G 1) equal(call2_G 1) equal(call3_G 1) equal(call4_G 1) equal(call5_G 1) equal(call6_G 1) equal(call7_G 1) equal(call8_G 1) equal(call9_G 1) equal(call10_G 1))1 0);

/* memory */
is_long: 0,
entry_price: 0,
SL_value: mul(entry_price 0.96);

/* contexts */ 
solver_input: input-token-address(),
solver_output:  output-token-address();

/* Quote token = WETH, USDT. Base token = shitcoin */
buy_contexts:if(every(
  equal-to(solver_input Quote_token)
  equal-to(solver_output Base_token))),
sell_contexts:if(every(
  equal-to(solver_input Base_token)
  equal-to(solver_output Quote_token))),

/* trade conditions */
longcondition: if(every(
  equal-to(buy_contexts 1)
  is-zero(get(is_long)) 
  equal-to(enterlong 1) 
  is-zero(GuardCondition))),
TP_condition: if(every(
  equal-to(sell_contexts 1)
  equal-to(get(is_long) 1) 
  less-than(Long_TWAP_S Long_TWAP_L))),
SL_condition: if(every(
  equal-to(sell_contexts 1)
  equal-to(get(is_long) 1) 
  less-than(Current_price SL_value)));

/* handle amount */
Amount:if(equal-to(longcondition 1) Buy_volume erc20balanceof(Base_token my_vault_address)
Price:if(
  equal-to(longcondition 1) 
  /*method for market buy */ 
  if(
    equal-to(TP_condition 1) 
    /*method for market buy */ 
    if(equal-to(SL_condition 1)
    /*method for market sell*/ 
    /*else nothing */)))





  



